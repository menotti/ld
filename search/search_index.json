{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#plano-de-ensino","title":"Plano de Ensino","text":""},{"location":"#playlist-das-aulas-no-youtube","title":"Playlist das aulas no YouTube","text":""},{"location":"#curso-de-verilog-no-hdlbits","title":"Curso de Verilog no HDLBits","text":""},{"location":"#objetivos-gerais","title":"OBJETIVOS GERAIS","text":"<p>Ao final da disciplina o estudante deve ser capaz de projetar e analisar circuitos digitais combinat\u00f3rios e sequenciais e executar sua implementa\u00e7\u00e3o usando circuitos integrados e linguagem de descri\u00e7\u00e3o de hardware. </p>"},{"location":"#ementa","title":"EMENTA","text":"<p>Conceitos fundamentais de eletr\u00f4nica digital. Representa\u00e7\u00e3o digital da informa\u00e7\u00e3o. \u00c1lgebra booleana. Tabelas verdade e portas l\u00f3gicas. Express\u00f5es l\u00f3gicas e formas can\u00f4nicas. Estrat\u00e9gias de minimiza\u00e7\u00e3o de circuitos. Elementos de mem\u00f3ria. M\u00e1quinas de estado (Mealy e Moore). Circuitos funcionais t\u00edpicos (combinacionais e sequenciais).</p>"},{"location":"#carga-horaria","title":"CARGA HOR\u00c1RIA","text":"<p>90 horas</p>"},{"location":"#inscricoes","title":"INSCRI\u00c7\u00d5ES","text":"<ul> <li>Apenas para alunos da UFSCar</li> </ul>"},{"location":"#duracao-dos-topicos","title":"DURA\u00c7\u00c3O DOS T\u00d3PICOS","text":"Horas T\u00f3pico Semana Slides ... Primeira Parte: Circuitos Combinacionais 3 Introdu\u00e7\u00e3o 1a [01] 3 Representa\u00e7\u00e3o Digital da Informa\u00e7\u00e3o 1a [02] 6 Fun\u00e7\u00f5es e Circuitos L\u00f3gicos 2a [03] 3 Algebra Booleana 3a [04] 3 Diagramas de Venn 3a [05] 3 S\u00edntese L\u00f3gica 4a [06] 3 Exemplos de Projeto 4a [07] 3 Introdu\u00e7\u00e3o \u00e0s Ferramentas CAD 5a [08] 3 Introdu\u00e7\u00e3o \u00e0 Verilog 5a [09] 2 Mapas de Karnaugh (i) 6a [10] 2 Mapas de Karnaugh (ii) 6a [11] 2 Mapas de Karnaugh (iii) 6a [12] 3 Representa\u00e7\u00e3o Num\u00e9rica e Circuitos Aritm\u00e9ticos 7a [13] 3 Projeto de Circuitos Aritm\u00e9ticos com Verilog 7a [14] 2 Multiplexadores 8a [15] 2 Conversores de C\u00f3digos 8a [16] 2 Outros Circuitos Combinacionais 8a [17] ... Segunda Parte: Circuitos Sequenciais 2 Latches e Flip-flops 9a [18] 2 Registradores 9a [19] 2 Implementa\u00e7\u00e3o em Verilog 9a [20] 6 An\u00e1lise de Tempo 10a [21] 2 M\u00e1quinas de Estados Finitos (i) 11a [22] 2 M\u00e1quinas de Estados Finitos (ii) 11a [23] 1 M\u00e1quinas de Estados Finitos (iii) 11a [24] 1 M\u00e1quinas de Estados Finitos (iv) 11a [25] 3 Minimiza\u00e7\u00e3o de M\u00e1quinas de Estados Finitos 12a [26] 3 An\u00e1lise de Circuitos Sequenciais 12a [27] 6 Estruturas de Barramentos 13a [28] 3 Exerc\u00edcio: Aquecedores 14a [29] 3 Exerc\u00edcio: Sem\u00e1foro 14a [30] 6 Avalia\u00e7\u00f5es 15a"},{"location":"#objetivos-especificos","title":"OBJETIVOS ESPEC\u00cdFICOS:","text":"<p>Ao final do curso os participantes dever\u00e3o ser capazes de: - Reconhecer fun\u00e7\u00f5es l\u00f3gicas e suas aplica\u00e7\u00f5es; - Aplicar m\u00e9todos de s\u00edntese de fun\u00e7\u00f5es l\u00f3gicas realizando otimiza\u00e7\u00f5es; - Entender representa\u00e7\u00f5es num\u00e9ricas e circuitos aritm\u00e9ticos comparando suas vantagens e desvantagens; - Analisar circuitos l\u00f3gicos, diferenciando os combinacionais dos sequenciais e determinando seu comportamento; - Avaliar circuitos l\u00f3gicos, identificando poss\u00edveis problemas e oportunidades de melhoria; - Criar e testar circuitos l\u00f3gicos, garantindo seu correto funcionamento.</p>"},{"location":"#estrategia-de-ensino","title":"ESTRAT\u00c9GIA DE ENSINO:","text":"<p>Em todos os t\u00f3picos de conte\u00fado as seguintes estrat\u00e9gias de ensino ser\u00e3o adotadas: - Aulas expositivas ass\u00edncronas (videoaulas) versando sobre a tem\u00e1tica do t\u00f3pico; - Elabora\u00e7\u00e3o de exerc\u00edcios individuais (question\u00e1rios) para consolida\u00e7\u00e3o da teoria; - Pr\u00e1ticas de laborat\u00f3rio (simula\u00e7\u00f5es) em grupos para consolida\u00e7\u00e3o da teoria e das habilidades t\u00e9cnicas.</p>"},{"location":"#atividades-dos-alunos","title":"ATIVIDADES DOS ALUNOS:","text":"<ul> <li>Assistir \u00e0s videoaulas gravadas, com dura\u00e7\u00e3o total m\u00e9dia de 40 minutos;</li> <li>Ler o material recomendado (e complementar), o que poder\u00e1 ser feito antes ou depois de assistir a videoaula, e para o que se estima uma dura\u00e7\u00e3o total de 20 a 40 minutos;</li> <li>Responder a um question\u00e1rio individual no AVA, o que ser\u00e1 usado para contabilizar a frequ\u00eancia nesta semana, atividade para a qual se estima uma dura\u00e7\u00e3o de 15 a 30 minutos;</li> <li>Resolver um exerc\u00edcio em grupo, indicado pelos professores, elaborar um relat\u00f3rio e entregar, atividade para a qual estima-se at\u00e9 3 horas de dedica\u00e7\u00e3o dos alunos;</li> <li>Participar de dois momentos avaliativos por videoconfer\u00eancia, agendados previamente com os professores, conforme especificado na se\u00e7\u00e3o Procedimentos de avalia\u00e7\u00e3o do aluno.</li> </ul>"},{"location":"#recursos-a-serem-utilizados","title":"RECURSOS A SEREM UTILIZADOS:","text":"<ul> <li>Ambiente virtual de aprendizagem (AVA) que, no caso desta disciplina, ser\u00e1 o Moodle UFSCar;</li> <li>Videoaulas gravadas e disponibilizadas no YouTube e no AVA;</li> <li>Webconfer\u00eancias via Google Meet nas quais os alunos s\u00f3 poder\u00e3o participar usando o email institucional;</li> <li>Question\u00e1rios e f\u00f3rum de discuss\u00e3o no AVA;</li> <li>Simuladores dispon\u00edveis na Internet para solu\u00e7\u00e3o de exerc\u00edcios;</li> <li>Materiais em PDF disponibilizados no AVA.</li> </ul>"},{"location":"#referencias","title":"REFER\u00caNCIAS","text":"<ul> <li>Ricardo dos Santos Ferreira e Ricardo Menotti, Introdu\u00e7\u00e3o \u00e0 L\u00f3gica Digital com Verilog, 2023<sup>4</sup></li> <li>Stephen Brown and Zvonko Vranesic, Fundamentals of Digital Logic with Verilog Design (3<sup>rd</sup> Edition), 2014</li> <li>Deepak Kumar Tala, World of ASIC, 2014</li> <li>HDLBits \u2014 Verilog Practice</li> <li>Introdu\u00e7\u00e3o ao Projeto de Circuitos Digitais utilizando FPGA</li> </ul>"},{"location":"#agradecimentos","title":"AGRADECIMENTOS","text":"<p>Agrade\u00e7o aos colegas de departamento Artino, Inoue, Luciano, Maur\u00edcio e Kato, que dividiram a oferta da disciplina comigo, fazendo diversas contribui\u00e7\u00f5es para o curso. Agrade\u00e7o tamb\u00e9m ao Prof. Ricardo Ferreira<sup>1</sup> pela coautoria no livro, ao Prof. Rodolfo Azevedo<sup>2</sup> pela ajuda com o GitHub Classroom e ao Prof. Lucas Wanner<sup>3</sup> pela ajuda com o Auto Multiple Choice. </p> <ol> <li> <p>https://www2.dpi.ufv.br/prof-ricardo-dos-santos-ferreira/ \u21a9</p> </li> <li> <p>https://www.ic.unicamp.br/~rodolfo/ \u21a9</p> </li> <li> <p>https://www.ic.unicamp.br/~lucas/ \u21a9</p> </li> <li> <p>Al\u00e9m do livro texto, cada aula/slide/tutorial pode ter refer\u00eancias complementares.\u00a0\u21a9</p> </li> </ol>"},{"location":"digitaljs/","title":"DigitalJS","text":"<p>Nesta pasta voc\u00ea encontra alguns exemplos interessantes para simular com o DigitalJS. </p> <p>Isso pode ser feito de v\u00e1rias formas:</p> <ul> <li>Online</li> <li>No VS Code</li> <li>Online no VS Code</li> <li>Verilog Highlight* (opcional)</li> </ul> <p>Em geral, salvamos apenas o arquivo .v,  basta gerar um novo circuito a partir dele e fazer a simula\u00e7\u00e3o. Em alguns exemplos, organizamos os componentes para que o circuito possa ser reconhecido mais facilmente, ent\u00e3o salvamos tamb\u00e9m o arquivo .digitaljs. </p> <p>A seguir est\u00e1 um sugest\u00e3o de ordem para a compreens\u00e3o dos exemplos:</p> <ul> <li>B\u00e1sico</li> <li>Multiplexador 4x1</li> <li>Multiplexador 4x2</li> <li>Codificador com prioridade 4x2</li> <li>Codificador com prioridade 8x3</li> <li>Latch SR</li> <li>Latch SR (com enable)</li> <li>Latch D</li> <li>Latch D (com enable)</li> <li>Flip-flop D (estrutural)</li> <li>Flip-flop D (comportamental)</li> <li>Flip-flop D (comportamental) reset s\u00edncrono</li> <li>Flip-flop D (comportamental) reset ass\u00edncrono</li> <li>Flip-flop D (comportamental) reset ass\u00edncrono invertido (active-low)</li> <li>Flip-flop T (estrutural)</li> <li>Flip-flop T (comportamental)</li> <li>Flip-flop JK (comportamental)</li> <li>Fibonacci (comportamental)</li> <li>Contador Ass\u00edncrono (estrutural)</li> <li>Contador S\u00edncrono (comportamental)</li> <li>Contador Johnson (estrutural)</li> <li>Contador Johnson (comportamental)</li> <li>Contador S\u00edncrono incr./decr. com carga (comportamental))</li> </ul>"},{"location":"hdlbits/","title":"HDLBits","text":"<p>Nesta pasta est\u00e3o solu\u00e7\u00f5es explicadas para problemas retirados do site HDLBits. Trata-se de um excelente material para a pr\u00e1tica de projeto de hardware usando Verilog. O material deve ser usado paralelamente ao material te\u00f3rico das aulas.  </p> <p>Se voc\u00ea n\u00e3o l\u00ea bem em ingl\u00eas, pode abrir uma segunda janela do site usando tradu\u00e7\u00e3o autom\u00e1tica, mas deve submeter as solu\u00e7\u00f5es na janela original em ingl\u00eas, pois o tradutor impede o funcionamento correto do site. </p> <p>Nesta playlist eu explico a solu\u00e7\u00e3o de todos os exerc\u00edcios do site. </p> <pre><code>-                                                                                           \n-                -  -  =  =  &lt;  &lt;    I M P O R T A N T E    &gt;  &gt;  =  =  -  -                \n-                                                                                           \n-  Tente resolver os problemas sozinho, sem olhar as repostas.                              \n!  Depois compare a sua solu\u00e7\u00e3o com o gabarito do site e com a que est\u00e1 neste reposit\u00f3rio.  \n+  Se voc\u00ea n\u00e3o conseguir resolver alguns deles, depois de tentar bastante, tudo bem         \n+  olhar as respostas, mas procure ao menos digitar o c\u00f3digo (isso ajuda a memorizar)       \n@@ ao inv\u00e9s de copiar/colar e tente resolv\u00ea-lo sozinho em outra oportunidade              @@\n-  Assim como em programa\u00e7\u00e3o, no projeto de hardware,                                       \n@@ ver respostas de problemas resolvidos n\u00e3o ajuda quase nada!                            @@\n</code></pre>"},{"location":"hdlbits/#indice-dos-problemas","title":"\u00cdndice dos problemas","text":"<ul> <li>Passo um </li> <li>Zero</li> <li>Fio</li> <li>Quatro fios</li> <li>Porta NOT</li> <li>Porta AND</li> <li>Porta NOR</li> <li>Porta XNOR</li> <li>Declarando fios</li> <li>CI 7458</li> <li>Vetores e concatena\u00e7\u00e3o</li> <li>Vetores em mais detalhes</li> <li>Sele\u00e7\u00e3o de parte vetorial</li> <li>Operador bit a bit em vetores</li> <li>Redu\u00e7\u00e3o em vetores</li> <li>Concatena\u00e7\u00e3o de vetores</li> <li>Invertendo um vetor</li> <li>Operador de replica\u00e7\u00e3o</li> <li>Concatena\u00e7\u00e3o e replica\u00e7\u00e3o</li> <li>M\u00f3dulo</li> <li>Tr\u00eas m\u00f3dulos</li> <li>M\u00f3dulos e vetores</li> <li>Somador carry-select</li> <li>Somador-subtrator</li> <li>Blocos <code>always</code> combinacionais</li> <li>Blocos <code>always</code> com clock</li> <li>Comando <code>if</code></li> <li>Comando <code>if</code> inferindo latch</li> <li>Evitando latches</li> <li>Invers\u00e3o de vetor com <code>for</code></li> <li>Contagem de bits 1</li> <li>Tabela verdade</li> <li>Igualdade entre 2 bits</li> <li>Tocar ou vibrar?</li> <li>Vetores ainda mais longos</li> <li>Multiplexador 256x1</li> <li>Multiplexador 4 bits 256x1</li> <li>Registrador 8 bit reset s\u00edncrono</li> <li>Registrador 8 bit reset ass\u00edncrono</li> <li>Mux e flip-flop</li> <li>Detector de borda</li> <li>Contador de d\u00e9cada</li> <li>Rel\u00f3gio de 12 horas</li> <li>LUT de 3 entradas</li> <li>Regra 90</li> <li>FSM reset ass\u00edncrono</li> <li>FSM reset s\u00edncrono</li> <li>Reservat\u00f3rio</li> <li>Lemmings batem</li> <li>Lemmings caem</li> <li>Lemmings cavam</li> <li>Lemmings morrem</li> <li>Receptor serial</li> <li>Receptor serial</li> <li>Mealy 101</li> <li>Bugs nand3</li> <li>Simula\u00e7\u00e3o Comb. 1</li> <li>Simula\u00e7\u00e3o Seq. 7</li> <li>Test bench clock</li> </ul>"},{"location":"hdlbits/001_step_one/","title":"Explica\u00e7\u00e3o","text":"<p>Este m\u00f3dulo vai gerar um warning na maioria nas feramentas, pois apresenta uma sa\u00edda constante 1 (VCC). </p> <p>A sintaxe <code>1'b1</code>, usada na resposta, possui tr\u00eas partes: - O n\u00famero de bits total;  - A base usada para descrev\u00ea-los; - Os valores dos bits na base escolhida. </p> <p>Veja mais detalhes sobre formatos num\u00e9ricos em Verilog.</p>"},{"location":"hdlbits/002_zero/","title":"Explica\u00e7\u00e3o","text":"<p>Este m\u00f3dulo vai gerar um warning na maioria nas feramentas, pois apresenta uma sa\u00edda constante 0 (GND). </p> <p>A sintaxe <code>1'b0</code>, usada na resposta alternativa, possui tr\u00eas partes: - O n\u00famero de bits total;  - A base usada para descrev\u00ea-los; - Os valores dos bits na base escolhida. </p> <p>Ela \u00e9 melhor do que a inicial, pois apenas <code>0</code> significa um n\u00famero de 32 bits e pode gerar warnings adicionais. </p> <p>Veja mais detalhes sobre formatos num\u00e9ricos em Verilog.</p>"},{"location":"hdlbits/003_wire/","title":"Explica\u00e7\u00e3o","text":"<p>Observe que os fios s\u00e3o direcionais, portanto <code>assign in = out</code> n\u00e3o \u00e9 equivalente.</p>"},{"location":"hdlbits/004_wire4/","title":"Explica\u00e7\u00e3o","text":"<p>\u00c9 poss\u00edvel atribuir a entrada <code>b</code> para duas sa\u00eddas (<code>x</code> e <code>y</code>), mas o contr\u00e1rio n\u00e3o, pois causaria um curto circuito. Dito de outra forma, um sinal pode ter m\u00faltiplos destinos, mas precisa ter uma \u00fanica origem. </p> <p>Experimente a vers\u00e3o do coment\u00e1rio, usando o operador de concatena\u00e7\u00e3o {}. \u00c9 preciso ter cuidado com a largura dos sinais concatenados, pois em Verilog a atribui\u00e7\u00e3o de larguras diferente n\u00e3o gera um erro, apenas despreza os bits excedentes. </p>"},{"location":"hdlbits/006_andgate/","title":"Explica\u00e7\u00e3o","text":"<p>Assim como C, Verilog tem operadores AND bit a bit (&amp;) e AND l\u00f3gico (&amp;&amp;) diferentes. Como estamos trabalhando com um bit aqui, n\u00e3o importa qual escolhemos.</p>"},{"location":"hdlbits/007_norgate/","title":"Explica\u00e7\u00e3o","text":"<p>Assim como C, Verilog tem operadores OR bit a bit (<code>|</code>) e OR l\u00f3gico (<code>||</code>) diferentes. Como estamos trabalhando com um bit aqui, n\u00e3o importa qual escolhemos.</p>"},{"location":"hdlbits/010_7458/","title":"Explica\u00e7\u00e3o","text":"<p>Nesta solu\u00e7\u00e3o foram usadas duas abordagens diferentes, uma para cada sa\u00edda:  - Para <code>p1y</code> usando uma abordagem funcional; - Para <code>p2y</code> usando uma abordagem estrutural, instanciando primitivas b\u00e1sicas (<code>and</code> e <code>or</code>) da linguagem. </p> <p>H\u00e1 ainda uma terceira abordagem, comportamental, que costuma ser mais adequada para descrever circuitos sequenciais. </p> <p>Note que: 1. N\u00e3o \u00e9 necess\u00e1rio nomear as inst\u00e2ncias de primitivas b\u00e1sicas (experimente remover as palavras <code>a1</code>, <code>a2</code> e <code>o1</code>;  2. A sa\u00edda de uma primitiva b\u00e1sica \u00e9 a primeira porta, pois ela pode ter v\u00e1rias entradas;  3. Foram declarados os fios <code>x</code> e <code>y</code> para fazer a liga\u00e7\u00e3o entre as portas l\u00f3gias. Estas declara\u00e7\u00f5es podem ser omitidas quando se tratam de sinais de um \u00fanico bit, mas algumas ferramentas podem exigir a declara\u00e7\u00e3o expl\u00edcita. </p>"},{"location":"hdlbits/011_vector0/","title":"Explica\u00e7\u00e3o","text":"<p>Para usar o operador de concatena\u00e7\u00e3o <code>{}</code> como na solu\u00e7\u00e3o apresentada \u00e9 preciso ter certeza de que os dois lados possuem a mesma largura de bits, ou descartar deliberadamente os bits adicionais do lado esquerdo da atribui\u00e7\u00e3o. </p> <p>Se quiser atribuir cada sinal separadamente, pode-se usar a sintaxe:</p> <pre><code>    assign o0 = vec[0];\n    assign o1 = vec[1];\n    assign o2 = vec[2];\n</code></pre>"},{"location":"hdlbits/012_vector1/","title":"Explica\u00e7\u00e3o","text":"<p>Leia atentamente as explica\u00e7\u00f5es sobre vetores contidas neste exerc\u00edcio! </p> <p>Nesta solu\u00e7\u00e3o est\u00e1 demonstrado um recurso da linguagem Verilog 2001 chamado indexed part-select, na qual \u00e9 poss\u00edvel especificar o bit base e mais/menos um offset ao inv\u00e9s de [msb:lsb].</p> <p>Este estilo de especifica\u00e7\u00e3o de vetor tem a vantagem de se poder usar vari\u00e1veis nos \u00edndices. </p>"},{"location":"hdlbits/015_gates4/","title":"Explica\u00e7\u00e3o","text":"<p>Os operadores usados nesta solu\u00e7\u00e3o s\u00e3o os de redu\u00e7\u00e3o, eles atuam sobre um \u00fanico vetor de bits e fazem a opera\u00e7\u00e3o l\u00f3gica correspondente entre os bits deste vetor. Assim, <code>&amp;in</code> equivale a <code>in[3]&amp;in[2]&amp;in[1]&amp;in[0]</code>. </p>"},{"location":"hdlbits/017_vectorr/","title":"Explica\u00e7\u00e3o","text":"<p>A solu\u00e7\u00e3o apresentada n\u00e3o \u00e9 muito pr\u00e1tica para vetores muito grandes, ent\u00e3o podemos usar duas outras formas de solu\u00e7\u00e3o para o mesmo problema </p>"},{"location":"hdlbits/017_vectorr/#bloco-combinacional","title":"Bloco combinacional","text":"<pre><code>    always @(*) begin   \n        for (integer i=0; i&lt;8; i++) \n            out[i] = in[8-i-1];\n    end\n</code></pre> <p><code>always @(*)</code> cria um bloco combinacional. Isso cria uma l\u00f3gica combinacional que calcula o mesmo resultado como c\u00f3digo sequencial. Repeti\u00e7\u00f5es <code>for</code> descrevem o comportamento do circuito, n\u00e3o a estrutura, portanto, eles s\u00f3 podem ser usados dentro de blocos procedurais (por exemplo, bloco <code>always</code>). O circuito criado (fios e portas) N\u00c3O faz nenhuma itera\u00e7\u00e3o: apenas produz o mesmo resultado COMO SE a itera\u00e7\u00e3o tivesse ocorrido. Na realidade, um sintetizador l\u00f3gico far\u00e1 a itera\u00e7\u00e3o em tempo de compila\u00e7\u00e3o para descobrir qual circuito produzir. Em contraste, um simulador Verilog executar\u00e1 o loop sequencialmente durante a simula\u00e7\u00e3o.</p>"},{"location":"hdlbits/017_vectorr/#bloco-geracional","title":"Bloco geracional","text":"<pre><code>    generate\n        genvar i;\n        for (i=0; i&lt;8; i = i+1) begin: my_block_name\n            assign out[i] = in[8-i-1];\n        end\n    endgenerate\n</code></pre> <p>Tamb\u00e9m \u00e9 poss\u00edvel fazer isso com uma repeti\u00e7\u00e3o <code>generate/for</code>. As repeti\u00e7\u00f5es geradas parecem <code>for</code> procedurais, mas s\u00e3o bastante diferentes em conceito e n\u00e3o s\u00e3o f\u00e1ceis de entender. Repeti\u00e7\u00f5es <code>generate/for</code> s\u00e3o usadas para fazer instancia\u00e7\u00f5es de \"coisas\" (ao contr\u00e1rio das procedurais, n\u00e3o descrevem a\u00e7\u00f5es). Essas \"coisas\" s\u00e3o instru\u00e7\u00f5es de atribui\u00e7\u00e3o, instancia\u00e7\u00f5es de m\u00f3dulos, declara\u00e7\u00f5es de fios/vari\u00e1veis e blocos procedimentais (coisas que voc\u00ea pode criar quando N\u00c3O estiver dentro um procedimento). Essas repeti\u00e7\u00f5es s\u00e3o avaliadas inteiramente em tempo de compila\u00e7\u00e3o. Voc\u00ea pode pensar nelas como forma de pr\u00e9-processamento para gerar mais c\u00f3digo, que \u00e9 ent\u00e3o executado atrav\u00e9s do sintetizador l\u00f3gico. No exemplo acima, a repeti\u00e7\u00e3o primeiro cria 8 instru\u00e7\u00f5es de atribui\u00e7\u00e3o em tempo de compila\u00e7\u00e3o, que \u00e9 ent\u00e3o sintetizado. Observe que devido ao uso pretendido (gera\u00e7\u00e3o de c\u00f3digo em tempo de compila\u00e7\u00e3o), existem algumas restri\u00e7\u00f5es sobre como voc\u00ea os usa: (i) algumas ferramentas requerem que um bloco <code>generate/for</code>  tenha um <code>begin/end</code> nomeado anexado (neste exemplo, denominado <code>my_block_name</code>); (ii) dentro do corpo da repeti\u00e7\u00e3o, as <code>genvar</code>s s\u00e3o somente leitura.</p>"},{"location":"hdlbits/020_module/","title":"Explica\u00e7\u00e3o","text":"<p>A primeira abordagem \u2013 por nome, mais completa \u2013 \u00e9 \u00fatil quando n\u00e3o queremos conectar todas as portas de um m\u00f3dulo. </p> <p>J\u00e1 a segunda abordagem \u2013 por posi\u00e7\u00e3o, mais enxuta - \u00e9 menos verbosa mas requer as conex\u00f5es na ordem. </p> <p>Note que, neste exemplo, n\u00e3o podemos instanciar o m\u00f3dulo duas vezes com a mesma sa\u00edda, pois elas estariam em curto.  </p>"},{"location":"hdlbits/023_module_shift/","title":"Explica\u00e7\u00e3o","text":"<p>Ap\u00f3s submeter sua solu\u00e7\u00e3o, veja a solu\u00e7\u00e3o do site e compare as diferen\u00e7as. Nesta aqui foi declarado um vetor de 2 bits ao inv\u00e9s de dois fios separados. As inst\u00e2ncias t\u00eam nomes indexados e a ordem est\u00e1 ao contr\u00e1rio (isso n\u00e3o interfere em nada). Isso foi feito para possibilitar uma poss\u00edvel sa\u00edda paralela posteriormente. </p> <p>Antes de codificar qualquer coisa mais ou menos complexa em Verilog \u00e9 preciso fazer um desenho esquem\u00e1tico do que se deseja obter. Assim, o projeto propriamente dito \u00e9 feito antes e a codifica\u00e7\u00e3o se torna mais simples, pois \u00e9 apenas uma transcri\u00e7\u00e3o do que j\u00e1 foi pensado. \u00c9 importante incluir o m\u00e1ximo de detalhes no desenho, principalmente nomes de inst\u00e2ncias e fios. </p> <p></p> <p>Figura adaptada daqui.</p> <p>P.S.: Este exerc\u00edcio trata da instancia\u00e7\u00e3o de m\u00f3dulos e liga\u00e7\u00f5es entre eles, mas a compreens\u00e3o completa do seu funcionamento depende de conhecimentos de circuitos sequenciais, abordados no segunda parte da disciplina. </p>"},{"location":"hdlbits/024_module_shift8/","title":"Explica\u00e7\u00e3o","text":"<p>Ap\u00f3s submeter sua solu\u00e7\u00e3o, veja a solu\u00e7\u00e3o do site e compare as diferen\u00e7as. Nesta aqui o mux foi implementado com operadores tern\u00e1rios aninhados. Note que quando usamos o bit mais significativo (<code>sel[1]</code>) no operador mais externo a ordem das liga\u00e7\u00f5es \u00e9 natural. Fa\u00e7a o diagrama esquem\u00e1tico com todos os nomes para perceber a diferen\u00e7a. </p>"},{"location":"hdlbits/032_always_if2/","title":"Explica\u00e7\u00e3o","text":"<p>O problema descrito aqui refere-se \u00e0s especifica\u00e7\u00f5es incompletas, mencionadas nesta aula.</p>"},{"location":"hdlbits/036_always_nolatches/","title":"Explica\u00e7\u00e3o","text":"<p>Outra forma de garantir que n\u00e3o haver\u00e1 especifica\u00e7\u00e3o incompleta \u00e9 atribuindo todas as sa\u00eddas com um valor padr\u00e3o antes de entrar no bloco <code>if</code> ou <code>case</code>. </p>"},{"location":"hdlbits/040_vector100r/","title":"Explica\u00e7\u00e3o","text":"<p>Ap\u00f3s submeter sua solu\u00e7\u00e3o, veja a solu\u00e7\u00e3o do site. Ela \u00e9 mais simples e tem um truque para inferir a largura de um sinal. </p>"},{"location":"hdlbits/041_popcount255/","title":"Explica\u00e7\u00e3o","text":"<p>N\u00e3o \u00e9 necess\u00e1rio testar se o bit em cada posi\u00e7\u00e3o \u00e9 1, apenas some ele ao total ;-) </p>"},{"location":"hdlbits/051_truthtable1/","title":"Explica\u00e7\u00e3o","text":"<p>Ap\u00f3s submeter sua solu\u00e7\u00e3o, veja a solu\u00e7\u00e3o do site para entender como eu cheguei nesta. </p>"},{"location":"hdlbits/052_mt2015_eq2/","title":"Explica\u00e7\u00e3o","text":"<p>Basta comparar os vetores inteiros ;-)</p>"},{"location":"hdlbits/060_gatesv100/","title":"Explica\u00e7\u00e3o","text":"<p>Ap\u00f3s submeter sua solu\u00e7\u00e3o, veja a solu\u00e7\u00e3o do site, pois ela \u00e9 muito mais simples do que esta.</p>"},{"location":"hdlbits/127_exams_ece241_2013_q4/","title":"Explica\u00e7\u00e3o","text":"<p>Veja o enunciado na p\u00e1gina do exerc\u00edcio. Apesar de termos 3 entradas em <code>s</code>, nem todas as combina\u00e7\u00f5es s\u00e3o v\u00e1lidas, apenas <code>000</code>, <code>001</code>, <code>011</code> e <code>111</code>. Se considerarmos s\u00f3 os n\u00edveis do reservat\u00f3rio, temos apenas 4 estados, mas h\u00e1 um detalhes sobre o n\u00edvel anterior que faz necess\u00e1rio replicar os n\u00edveis intermedi\u00e1rios. </p> <p></p>"},{"location":"labs/","title":"Laborat\u00f3rios","text":""},{"location":"labs/#simulacoes","title":"Simula\u00e7\u00f5es","text":"<p>Em geral, as simula\u00e7\u00f5es funcionais podem todas ser realizada em ambiente Linux. A seguir est\u00e1 o comando de instala\u00e7\u00e3o, dependendo de sua distribui\u00e7\u00e3o, dos pacotes necess\u00e1rios: <code>[apt|snap|yum|rpm|dnf|pacman] install iverilog gtkwave</code></p> <p>As simula\u00e7\u00f5es com an\u00e1lise temporal dependem de ferramentas espec\u00edficas de cada fabricante. </p>"},{"location":"labs/#extensoes-uteis-para-o-vscode","title":"Extens\u00f5es \u00fateis para o VSCode","text":"<ul> <li>Verilog</li> <li>WaveTrave</li> <li>DigitalJS</li> </ul>"},{"location":"labs/#orientacoes","title":"Orienta\u00e7\u00f5es","text":"<p>Consulte o primeiro laborat\u00f3rio para ver as ferramentas usadas no semestre atual. </p>"},{"location":"labs/01_demo/","title":"Introdu\u00e7\u00e3o ao kit de FPGA","text":"<p>Neste laborat\u00f3rio, teremos o primeiro contato com o kit de FPGAs usado durante o curso. </p> <p>\u26a0\ufe0f Notar que os procedimentos adotados aqui dependem do fabricante/kit e do sistema operacional usados.</p> <p>Os arquivos usados, que precisam estar organizados desta forma, s\u00e3o os seguintes:</p> <pre><code>\u251c\u2500\u2500 01_demo          # diret\u00f3rio / pasta\n\u2502   \u251c\u2500\u2500 README.md    # este arquivo\n\u2502   \u2514\u2500\u2500 top.v        # implementa\u00e7\u00e3o do circuito\n\u251c\u2500\u2500 DE0_CV.qsf       # arquivo de pinos da placa DE0_CV\n\u251c\u2500\u2500 Makefile         # arquivo do make (usado no Linux)\n\u2514\u2500\u2500 make_wannabe.bat # arquivo batch (usado no Windows)\n</code></pre> <p>Voc\u00ea pode obt\u00ea-los clonando este reposit\u00f3rio ou baixando e descompactando um arquivo .zip dele. </p> <p>Nosso arquivo Verilog \u00e9 muito simples:</p> <pre><code>module top(\n    input [9:0] SW,\n    output [9:0] LEDR);\n\n    assign LEDR = SW; \nendmodule\n</code></pre> <p>Ele apenas atribui a saida <code>LEDR</code>, que aciona os \ud83d\udca1LEDs da placa, usando a entrada <code>SW</code>, relativa aos switch buttons. Como ambos s\u00e3o vetores (veremos o que isso significa mais adiante), cada bot\u00e3o ir\u00e1 acionar um LED independentemente. Os nomes escolhidos para as entradas (<code>input</code>) e sa\u00eddas (<code>output</code>) s\u00e3o importantes, pois no arquivo de pinos da placa encontramos o seguinte:</p> <pre><code>set_location_assignment PIN_AA2 -to LEDR[0]\nset_location_assignment PIN_AA1 -to LEDR[1]\nset_location_assignment PIN_W2 -to LEDR[2]\nset_location_assignment PIN_Y3 -to LEDR[3]\nset_location_assignment PIN_N2 -to LEDR[4]\nset_location_assignment PIN_N1 -to LEDR[5]\nset_location_assignment PIN_U2 -to LEDR[6]\nset_location_assignment PIN_U1 -to LEDR[7]\nset_location_assignment PIN_L2 -to LEDR[8]\nset_location_assignment PIN_L1 -to LEDR[9]\n\nset_location_assignment PIN_U13 -to SW[0]\nset_location_assignment PIN_V13 -to SW[1]\nset_location_assignment PIN_T13 -to SW[2]\nset_location_assignment PIN_T12 -to SW[3]\nset_location_assignment PIN_AA15 -to SW[4]\nset_location_assignment PIN_AB15 -to SW[5]\nset_location_assignment PIN_AA14 -to SW[6]\nset_location_assignment PIN_AA13 -to SW[7]\nset_location_assignment PIN_AB13 -to SW[8]\nset_location_assignment PIN_AB12 -to SW[9]\n</code></pre>"},{"location":"labs/01_demo/#altera-intel","title":"Altera / Intel\u00ae","text":""},{"location":"labs/01_demo/#quartus-ii-windows","title":"Quartus II (Windows)","text":"<p>Para fazer o laborat\u00f3rio usando linha de comandos (recomendado), pressione <code>\u229e Win</code>+<code>R</code>, digite <code>cmd</code> e pressione <code>Enter</code> para abrir o Promp de Comandos. Em sua janela, digite a sequ\u00eancia de comandos a seguir, considerando o seu caminho para a pasta:</p> <pre><code>cd C:\\Users\\aluno\\Downloads\\ld\\labs\\01_demo\n..\\make_wannabe.bat\n</code></pre> <p>Neste v\u00eddeo eu mostro como criar um projeto usando a interface gr\u00e1fica da ferramenta e tamb\u00e9m usando linhas de comando. </p> <p>\u26a0\ufe0fNotar que os procedimentos podem variar de acordo com a vers\u00e3o da ferramenta usada. </p>"},{"location":"labs/01_demo/#referencias","title":"Refer\u00eancias","text":"<ul> <li> <p>Git</p> <ul> <li>Ol\u00e1, Mundo</li> </ul> </li> <li> <p>Altera / Intel\u00ae </p> <ul> <li> <p>Quartus II</p> <ul> <li>Documenta\u00e7\u00e3o (aten\u00e7\u00e3o para a vers\u00e3o usada!)</li> </ul> </li> <li> <p>DE0-CV</p> <ul> <li>Manual do usu\u00e1rio</li> <li>Arquivo de pinos</li> </ul> </li> </ul> </li> <li> <p>AMD / Xilinx\u00ae</p> <ul> <li> <p>Vivado</p> <ul> <li>Documenta\u00e7\u00e3o (aten\u00e7\u00e3o para a vers\u00e3o usada!)</li> </ul> </li> <li> <p>Zybo Z7-20</p> <ul> <li>Manual de refer\u00eancia</li> <li>Arquivo de pinos</li> </ul> </li> </ul> </li> </ul>"},{"location":"labs/02_blink/","title":"Blink","text":"<p>Neste laborat\u00f3rio, o objetivo \u00e9 piscar os LEDs da placa de diferentes maneiras. As frequ\u00eancias usadas ser\u00e3o sempre relativas ao clock de entrada. </p> <p>Usamos um contador inteiro de 32 bits, que \u00e9 incrementado a cada subida do clock;</p> <pre><code>integer count; // 32-bit counter\nalways @(posedge CLOCK_50)\n    count &lt;= count + 1;\n</code></pre> <p>Consequentemente, o LSB do contador (bit 0) ser\u00e1 um clock com a metade da frequ\u00eancia do clock principal (de entrada).</p> <p>Aqui voc\u00ea pode calcular a frequ\u00eancia de cada um dos bits trocando o 24 por outra posi\u00e7\u00e3o qualquer na equa\u00e7\u00e3o. </p> <p>Na primeira tentativa, usamos o c\u00f3digo original que cont\u00e9m a seguinte atribui\u00e7\u00e3o:</p> <pre><code>assign LEDR = count; // 32 &gt; 10 \n</code></pre> <p>Como o contador possui 32 bits e o sinal <code>LEDR</code> s\u00f3 tem 10 bits, os 10 bits menos significativos de <code>count</code> s\u00e3o usados e os demais s\u00e3o desprezados.  - O que acontece com os LEDs? - Qual a frequ\u00eancia do <code>LEDR[0]</code>? - Qual a frequ\u00eancia do <code>LEDR[9]</code>? - \u00c9 poss\u00edvel v\u00ea-los piscando? Tente filmar com o seu celular... </p> <p>Na segunda tentativa, vamos usar o c\u00f3digo a seguir que est\u00e1 comentado:</p> <pre><code>assign LEDR = count[31:22];\n</code></pre> <p>Agora estamos selecionando explicitamente os dez bit mais significativos do contador. </p> <p>O que mudou? Responda novamente as perguntas anteriores. </p> <p>Por \u00faltimo, escolhemos um \u00fanico bit do contador e o replicamos dez vezes para atribuir a todos os LEDs:</p> <pre><code>assign LEDR = {10{count[24]}};\n</code></pre> <p>O que mudou? Responda novamente as perguntas anteriores. </p>"},{"location":"labs/03_leds/","title":"Index","text":""},{"location":"labs/03_leds/#test-bench","title":"Test bench","text":"<p>Nesta pr\u00e1tica vamos usar o Icarus Verilog para fazer uma simula\u00e7\u00e3o e apresentar o seu resultado na console e no GTKWave ou WaveTrace.</p>"},{"location":"labs/03_leds/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Abra um terminal no Linux e digite o seguinte comando para instalar os pacotes necess\u00e1rios:</p> <p><code>sudo apt update &amp;&amp; sudo apt install iverilog gtkwave</code></p>"},{"location":"labs/03_leds/#comandos-basicos","title":"Comandos b\u00e1sicos","text":""},{"location":"labs/03_leds/#clonando-o-repositorio","title":"Clonando o reposit\u00f3rio","text":"<p>O comando a seguir criar\u00e1 uma c\u00f3pia local do reposit\u00f3rio:</p> <p><code>git clone https://github.com/menotti/ld.git</code></p>"},{"location":"labs/03_leds/#acessando-um-diretorio","title":"Acessando um diret\u00f3rio","text":"<p>Para acessar o diret\u00f3rio da pr\u00e1tica digite:</p> <p><code>cd ld/labs/03_leds</code></p> <p>Ao digitar o caminho desejado, voc\u00ea pode usar a tecla <code>TAB</code> para complet\u00e1-lo automaticamente.</p>"},{"location":"labs/03_leds/#fazendo-a-implementacao-da-funcao","title":"Fazendo a implementa\u00e7\u00e3o da fun\u00e7\u00e3o","text":"<p>A implementa\u00e7\u00e3o original da fun\u00e7\u00e3o apenas liga cada switch com o respectivo LED. </p> <pre><code>module top(\n    input [3:0] sw, \n    output [3:0] led);\n\n    assign led = sw;\n    //assign led[0] = ~sw[0];\nendmodule\n</code></pre> <p>Use a sintaxe do coment\u00e1rio para atribuir cada LED com sua respectiva fun\u00e7\u00e3o, conforme apresentado no diagrama esquem\u00e1tico:</p> <p></p>"},{"location":"labs/03_leds/#inspecionando-o-test-bench-tb_topv","title":"Inspecionando o test bench (<code>tb_top.v</code>)","text":"<p>O test bench a seguir instancia o m\u00f3dulo a ser testado (<code>dut</code>) e o estimula com todas as combina\u00e7\u00f5es poss\u00edveis de entrada. </p> <p>Observe que para as entradas <code>sw</code> criamos um <code>reg</code>, pois precisamos atribuir valores a elas. J\u00e1 para as sa\u00eddas <code>led</code> precisamos apenas de fios <code>wire</code> para receber os valores calculado internamente. </p> <pre><code>module tb_top;\n    wire [3:0] led;\n    reg [3:0] sw;\n\n    integer i;\n    reg [11:0] bancada = 12'hF7F; // Modificar\n\n    top dut(sw, led);\n\n    initial \n    begin\n        $dumpfile(\"dump.vcd\");\n        $dumpvars(0);\n\n        $display(\"Linhas totais: %0d\", 2**$bits(led));\n        $monitor(\"%b %b\", sw, led);\n\n        for (i = 0; i &lt; (2**$bits(led)); i++)\n            #10 sw = i;\n        #10 $finish;\n    end\nendmodule\n</code></pre>"},{"location":"labs/03_leds/#inspecionando-o-makefile","title":"Inspecionando o <code>Makefile</code>","text":"<pre><code>CC = iverilog \nFLAGS = -Wall\nVIEWER = gtkwave\nall: *.v\n    $(CC) $(FLAGS) *.v \n    vvp a.out\n    $(VIEWER) dump.vcd config.gtkw\n</code></pre>"},{"location":"labs/03_leds/#saida-esperada-make","title":"Sa\u00edda esperada (<code>make</code>)","text":"<pre><code>menotti@vlab:~/Workspace/ld/labs/03_leds$ make\niverilog  -Wall *.v \nvvp a.out\nVCD info: dumpfile dump.vcd opened for output.\nLinhas totais: 16\n                   0 xxxx xxxx\n                  10 0000 0001\n                  20 0001 0000\n                  30 0010 0111\n                  40 0011 0110\n                  50 0100 0001\n                  60 0101 0000\n                  70 0110 0001\n                  80 0111 0000\n                  90 1000 0001\n                 100 1001 0000\n                 110 1010 0111\n                 120 1011 0110\n                 130 1100 1101\n                 140 1101 1100\n                 150 1110 1101\n                 160 1111 1100\ngtkwave dump.vcd config.gtkw\n\nGTKWave Analyzer v3.3.104 (w)1999-2020 BSI\n\n[0] start time.\n[170] end time.\n</code></pre>"},{"location":"labs/03_leds/#imagem-da-simulacao","title":"Imagem da simula\u00e7\u00e3o","text":""},{"location":"labs/06_gray/","title":"Index","text":""},{"location":"labs/06_gray/#jogo-em-codigo-gray","title":"Jogo em C\u00f3digo Gray","text":"<p>O objetivo deste laborat\u00f3rio \u00e9 construir um jogo simples onde o jogador precisa fazer um LED caminhar na placa, informando uma sequ\u00eancia correta nos switch buttons em c\u00f3digo gray. </p>"},{"location":"labs/06_gray/#codigo-gray","title":"C\u00f3digo Gray","text":"<p>No c\u00f3digo Gray, apenas um bit muda por vez, o que evita erros em sistemas onde a leitura intermedi\u00e1ria entre bits pode gerar valores incorretos (veremos isso mais adiante).</p>"},{"location":"labs/06_gray/#codigo-one-hot","title":"C\u00f3digo One-hot","text":"<p>Na codifica\u00e7\u00e3o One-hot, apenas um bit \u00e9 setado por vez e os demais s\u00e3o zerados. Isso facilita a depura\u00e7\u00e3o de circuitos e simplifica a sua l\u00f3gica, embora aumente o n\u00famero de bits necess\u00e1rios. </p>"},{"location":"labs/06_gray/#funcionamento","title":"Funcionamento","text":"<p>O jogo come\u00e7a com todos os switches desligados, o que deve fazer com que apenas o primeiro LED se acenda (LSB). A seguir, o jogador deve ir mudando um switch de cada vez (obviamente sem olhar a tabela) para que o LED avance uma posi\u00e7\u00e3o de cada vez at\u00e9 chegar no \u00faltimo (MSB).</p> Decimal Bin\u00e1rio Gray (SW) One-Hot (LEDs)<sup>1</sup> 0 <code>0000</code> <code>0000</code> <code>0000000001</code> 1 <code>0001</code> <code>0001</code> <code>0000000010</code> 2 <code>0010</code> <code>0011</code> <code>0000000100</code> 3 <code>0011</code> <code>0010</code> <code>0000001000</code> 4 <code>0100</code> <code>0110</code> <code>0000010000</code> 5 <code>0101</code> <code>0111</code> <code>0000100000</code> 6 <code>0110</code> <code>0101</code> <code>0001000000</code> 7 <code>0111</code> <code>0100</code> <code>0010000000</code> 8 <code>1000</code> <code>1100</code> <code>0100000000</code> 9 <code>1001</code> <code>1101</code> <code>1000000000</code> 10 <code>1010</code> <code>1111</code> <code>1111111111</code> 11 <code>1011</code> <code>1110</code> <code>1111111111</code> 12 <code>1100</code> <code>1010</code> <code>1111111111</code> 13 <code>1101</code> <code>1011</code> <code>1111111111</code> 14 <code>1110</code> <code>1001</code> <code>1111111111</code> 15 <code>1111</code> <code>1000</code> <code>1111111111</code>"},{"location":"labs/06_gray/#implementacao","title":"Implementa\u00e7\u00e3o","text":"<p>Os conversores de c\u00f3digo necess\u00e1rios para a implementa\u00e7\u00e3o est\u00e3o dispon\u00edveis, ent\u00e3o voc\u00ea s\u00f3 precisa:</p> <ol> <li>Juntar as partes fornecidas;</li> <li>Tratar as convers\u00f5es que resultariam em mais de 10 bits;</li> <li>Implementar na placa e jogar. \ud83e\udd13</li> </ol> <p>Veja o exemplo do circuito realizando a \u00faltima convers\u00e3o v\u00e1lida (linha 9 da tabela fornecida):</p> <p></p> <p>Agora, veja o que deve acontecer quando ele converte um n\u00famero inv\u00e1lido (todos os LEDs acessos):</p> <p></p> <ol> <li> <p>como s\u00f3 vamos usar 10 bits, qualquer convers\u00e3o acima disso deve acender todos os LEDs.\u00a0\u21a9</p> </li> </ol>"},{"location":"labs/07_addsub/","title":"Somador/Subtrator de 4 bits com sinal","text":"<p>O objetivo desta pr\u00e1tica \u00e9 implementar e testar um somador/subtrator de 4 bits, a partir de um somador fornecido, em duas etapas: 1. Implementar e testar por simula\u00e7\u00e3o; 2. Adaptar e colocar no kit de FPGA. </p>"},{"location":"labs/07_addsub/#funcionamento-na-placa","title":"Funcionamento na placa","text":"<p>Deseja-se implementar um Somador/Subtrator de 4 bits utilizando como sa\u00edda o valor em hexadecimal nos displays de sete segmentos. O sistema deve ter as seguintes caracter\u00edsticas:  - O switch <code>SW[9]</code> escolhe entre Soma=0 e Subtra\u00e7\u00e3o=1; - Os switches<code>SW[8:5]</code> e <code>SW[4:1]</code> informam os operandos X e Y respectivamente;  - Em caso de overflow, o switch <code>SW[0]</code> escolhe entre mostrar \"Erro\"=0 ou as Entradas=1 que o geraram; - Os 4 d\u00edgitos mais \u00e0 esquerda mostram as entradas ou \"Erro\", dependendo de <code>SW[0]</code>;  - Os 2 d\u00edgitos mais \u00e0 direita mostram sempre o resultado da opera\u00e7\u00e3o - Os LEDs acendem todos em caso de erro;</p>"},{"location":"labs/07_pos2sop/","title":"Comparando duas fun\u00e7\u00f5es l\u00f3gica equivalentes (POS e SOP)","text":"<p>O objetivo deste laborat\u00f3rio \u00e9 comparar duas implementa\u00e7\u00f5es equivalentes de uma mesma fun\u00e7\u00e3o l\u00f3gica. A partir do m\u00f3dulo fornecido (POS), implemente um equivalente na forma de SOP. Depois coloque ambos no kit FPGA para comparar suas sa\u00eddas. </p>"},{"location":"labs/07_pos2sop/#funcionamento","title":"Funcionamento","text":"<p>As entradas das fun\u00e7\u00f5es l\u00f3gicas devem ser atribuidas aos mesmos switches de 2 a 0 na placa, para que as fun\u00e7\u00f5es l\u00f3gicas recebam sempre as mesmas entradas.</p> <p></p> <p>Suas sa\u00eddas devem ser atribuidas aos LEDs, de forma que a metade deles receba o resultado de uma fun\u00e7\u00e3o e a outra metade receba o resultado da outra. Use o operador de replica\u00e7\u00e3o <code>{{}}</code> para acender mais de um LED a partir do mesmo drive. </p>"},{"location":"labs/08_guess/","title":"Jogo da convers\u00e3o (HEX2BIN)","text":"<p>O objetivo deste laborat\u00f3rio \u00e9 implementar um jogo de convers\u00e3o de hexadecimal para bin\u00e1rio conforme a figura a seguir.</p> <p></p>"},{"location":"labs/08_guess/#funcionamento","title":"Funcionamento","text":"<ul> <li>Se <code>SW[0]</code> \u00e9 acionado, n\u00fameros aleat\u00f3rios aparecem no display, quanto ele \u00e9 desligado o n\u00famero escolhido fica dispon\u00edvel para a convers\u00e3o.</li> <li>O mesmo n\u00famero deve ser informado na base bin\u00e1riae em <code>SW[8:1]</code>, enquanto isso acontece ele \u00e9 mostrado nos LEDs <code>LEDR[8:1]</code>. </li> <li>Se a convers\u00e3o for bem sucedida, os LEDS laterais piscam (<code>LEDR[9]</code> e <code>LEDR[0]</code>).</li> </ul>"},{"location":"labs/08_guess/#criterios-de-avaliacao","title":"Crit\u00e9rios de avalia\u00e7\u00e3o","text":"<ol> <li>Implemente o funcionamento b\u00e1sico, instanciando os m\u00f3dulos <code>random</code> e <code>comp</code>, para receber a nota base para aprova\u00e7\u00e3o.</li> <li>Mostre uma palavra nos demais d\u00edgitos quando o jogador acertar para receber um incremento na nota. </li> <li>Implemente um contador de tempon os demais d\u00edgitos para receber a nota m\u00e1xima. Ele deve ser zerado enquanto embaralha, contar o tempo durante a tentativa e parar quando o jogador acerta. </li> </ol>"},{"location":"labs/10_time/","title":"Simula\u00e7\u00e3o temporal","text":""},{"location":"labs/10_time/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Este laborat\u00f3rio consiste na compara\u00e7\u00e3o de dois tipos de somadores em circuitos digitais: o Ripple Carry Adder (RCA) e o Carry Lookahead Adder (CLA). O objetivo \u00e9 analisar a efici\u00eancia de tempo de ambos os m\u00f3dulos por meio da simula\u00e7\u00e3o que considera o atraso de propaga\u00e7\u00e3o do sinal el\u00e9trico no dispositivo escolhido. </p>"},{"location":"labs/10_time/#modulos-a-serem-testados","title":"M\u00f3dulos a serem testados","text":"<ul> <li> <p>Ripple Carry Adder (RCA): Este m\u00f3dulo realiza a adi\u00e7\u00e3o de dois n\u00fameros bin\u00e1rios, propagando o carry de bit a bit. Embora seja simples de implementar, sua efici\u00eancia diminui \u00e0 medida que aumenta o n\u00famero de bits.</p> </li> <li> <p>Carry Lookahead Adder (CLA): Este m\u00f3dulo melhora a velocidade da adi\u00e7\u00e3o ao calcular os carries de forma antecipada, permitindo uma adi\u00e7\u00e3o mais r\u00e1pida em compara\u00e7\u00e3o com o RCA.</p> </li> </ul>"},{"location":"labs/10_time/#resultados-esperados","title":"Resultados Esperados","text":"<p>O desempenho dos dois m\u00f3dulos deve ser testado e os tempos de execu\u00e7\u00e3o registrados. O gr\u00e1fico abaixo ilustra a compara\u00e7\u00e3o dos tempos de execu\u00e7\u00e3o para diferentes larguras de bits.</p>"},{"location":"labs/10_time/#grafico-de-comparacao-do-atraso","title":"Gr\u00e1fico de compara\u00e7\u00e3o do atraso","text":""},{"location":"labs/10_time/#diferenca-nos-atrasos","title":"Diferen\u00e7a nos atrasos","text":"<p>Aqui podemos observar, como exemplo, que utilizando 32 bits como par\u00e2metro de largura, obtemos um atraso maior no m\u00f3dulo RCA em rela\u00e7\u00e3o ao m\u00f3dulo CLA, o que corrobora com os dados obtidos no gr\u00e1fico acima.</p>"},{"location":"labs/10_time/#comparacao-de-ocupacao-alms","title":"Compara\u00e7\u00e3o de ocupa\u00e7\u00e3o (ALMs)","text":""},{"location":"livro/","title":"Index","text":"<p>Este material \u00e9 complementar ao livro Introdu\u00e7\u00e3o \u00e0 L\u00f3gica Digital com Verilog: Uma abordagem pr\u00e1tica.</p> <p></p>"},{"location":"sim/","title":"Simula\u00e7\u00f5es no GitHub","text":"<p>Nesta pasta est\u00e3o simula\u00e7\u00f5es que podem ser feitas em ambiente Linux ou no GitHub Codespaces. As turmas da disciplina precisam entregar as simula\u00e7\u00f5es a partir do GitHub Classroom usando os links postados no AVA. </p> <p>Casa simula\u00e7\u00e3o possui um script <code>setup.sh</code> para instalar o simulador, mas ele s\u00f3 precisa ser executado uma \u00fanica vez em cada ambiente. O script <code>run.sh</code> pode ser usado para conferir se os resultados est\u00e3o corretos, antes de fazer o <code>commit</code> para entrega. Em cada simula\u00e7\u00e3o, as pastas <code>.github</code> e <code>tests</code> s\u00e3o protegidas e n\u00e3o podem ser alteradas, sob pena de zerar a nota do exerc\u00edcio. </p>"},{"location":"sim/00-getting-started/","title":"Como fazer usando o navegador (l4m3r)","text":""},{"location":"sim/00-getting-started/#como-fazer-usando-o-terminal-1337","title":"Como fazer usando o terminal (1337)","text":"<pre><code># Criar uma conta no GitHub, entrar na turma e aceitar a tarefa\ngit clone https://github.com/DC-UFSCar/ld-2025s1-getting-started-USERNAME # trocando USERNAME pelo seu usu\u00e1rio\ncd ld-2025s1-getting-started-USERNAME # idem\n# Editar os arquivos necess\u00e1rios no seu editor favorito (vim &gt; emacs)\ngit status # lista os arquivos modificados\ngit diff # ver o que foi modificado \ngit add hello.v # adiciona o(s) arquivo(s) modificado(s)\ngit commit -m \"well done!\" # usar uma mensagem que descreva bem o que voc\u00ea fez NESTE commit\ngit push # envia para o reposit\u00f3rio remoto\n# Pronto! Sua simula\u00e7\u00e3o foi entregue e ser\u00e1 corrigida automaticamente\n</code></pre>"},{"location":"sim/00-getting-started/#the-basics-of-github","title":"The Basics of GitHub","text":""},{"location":"sim/00-getting-started/#course-overview-and-learning-outcomes","title":"\ud83e\udd13 Course overview and learning outcomes","text":"<p>The goal of this course is to give you a brief introduction to GitHub. We\u2019ll also provide you with materials for further learning and a few ideas to get you started on our platform. \ud83d\ude80</p>"},{"location":"sim/00-getting-started/#octocat-git-and-github","title":":octocat: Git and GitHub","text":"<p>Git is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you\u2019ve worked on and can easily revert back to an older version if need be. It also makes working with others easier\u2014groups of people can work together on the same project and merge their changes into one final source!</p> <p>GitHub is a way to use the same power of Git all online with an easy-to-use interface. It\u2019s used across the software world and beyond to collaborate and maintain the history of projects.</p> <p>GitHub is home to some of the most advanced technologies in the world. Whether you're visualizing data or building a new game, there's a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we'll dig into the rest later.</p>"},{"location":"sim/00-getting-started/#octocat-understanding-the-github-flow","title":":octocat: Understanding the GitHub flow","text":"<p>The GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.</p>"},{"location":"sim/00-getting-started/#repositories","title":"Repositories","text":"<p>A repository is where your project work happens--think of it as your project folder. It contains all of your project\u2019s files and revision history.  You can work within a repository alone or invite others to collaborate with you on those files.</p>"},{"location":"sim/00-getting-started/#cloning","title":"Cloning","text":"<p>When a repository is created with GitHub, it\u2019s stored remotely in the \u2601\ufe0f. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more.  To learn more about cloning, read \"Cloning a Repository\". </p>"},{"location":"sim/00-getting-started/#committing-and-pushing","title":"Committing and pushing","text":"<p>Committing and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you\u2019re ready to share it. You can make a commit when you have made changes to your project that you want to \u201ccheckpoint.\u201d You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g. \u201cAdded a README with information about our project\u201d).</p> <p>Once you have a commit or multiple commits that you\u2019re ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you\u2019ll get used to it \ud83d\ude42</p>"},{"location":"sim/00-getting-started/#github-terms-to-know","title":"\ud83d\udcbb GitHub terms to know","text":""},{"location":"sim/00-getting-started/#repositories_1","title":"Repositories","text":"<p>We mentioned repositories already, they are where your project work happens, but let\u2019s talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your \"GitHub dashboard\" helps to easily navigate to your repositories and see useful information about them. Make sure you\u2019re logged in to see it!</p> <p>Repositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. \ud83d\ude04  To learn more about repositories read \"Creating, Cloning, and Archiving Repositories and \"About README's\". </p>"},{"location":"sim/00-getting-started/#branches","title":"Branches","text":"<p>You can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository\u2014main. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read \"About Branches\".</p>"},{"location":"sim/00-getting-started/#forks","title":"Forks","text":"<p>A fork is another way to copy a repository, but is usually used when you want to contribute to someone else\u2019s project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read \"Fork a repo\"</p>"},{"location":"sim/00-getting-started/#pull-requests","title":"Pull requests","text":"<p>When working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read \"About Pull Requests\". </p>"},{"location":"sim/00-getting-started/#issues","title":"Issues","text":"<p>Issues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!</p> <p>For larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this \"About Project boards document. You likely won\u2019t need a project board for your assignments, but once you move on to even bigger projects, they\u2019re a great way to organize your team\u2019s work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read \"About Issues\". </p>"},{"location":"sim/00-getting-started/#your-user-profile","title":"Your user profile","text":"<p>Your profile page tells people the story of your work through the repositories you're interested in, the contributions you've made, and the conversations you've had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you!  To learn more about your user profile and adding and updating your profile README, read \"Managing Your Profile README\". </p>"},{"location":"sim/00-getting-started/#using-markdown-on-github","title":"Using markdown on GitHub","text":"<p>You might have noticed already, but you can add some fun styling to your issues, pull requests, and files. \"Markdown\" is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub\u2019s flavor of markdown, read \"Basic Writing and Formatting Syntax\". </p>"},{"location":"sim/00-getting-started/#engaging-with-the-github-community","title":"Engaging with the GitHub community","text":"<p>The GitHub community is vast. There are many types of people who use GitHub in their day to day\u2014students like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start. </p>"},{"location":"sim/00-getting-started/#starring-repositories","title":"Starring repositories","text":"<p>If you find a repository interesting or you want to keep track of it, star it! When you star a repository it\u2019s also used as a signal to surface better recommendations on github.com/explore. If you\u2019d like to get back to your starred repositories you can do so via your user profile.  To learn  more about starring repositories, read \"Saving Repositories with Stars\". </p>"},{"location":"sim/00-getting-started/#following-users","title":"Following users","text":"<p>You can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on.  To learn more about following users, read \"Following People\".</p>"},{"location":"sim/00-getting-started/#browsing-github-explore","title":"Browsing GitHub Explore","text":"<p>GitHub Explore is a great place to do just that \u2026 explore  You can find new projects, events, and developers to interact with.</p> <p>You can check out the GitHub Explore website at github.com/explore. The more you interact with GitHub the more tailored your Explore view will be. </p>"},{"location":"sim/00-getting-started/#optional-next-steps","title":"\ud83d\udcdd Optional next steps","text":"<ul> <li>Open a pull request and let your teacher know that you\u2019ve finished this course.  </li> <li>Create a new markdown file in this repository. Let them know what you learned and what you are still confused about! Experiment with different styles!</li> <li>Create your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What's your favorite hobby? Learn more about creating your profile README in the document, \"Managing Your Profile README\".</li> <li>Go to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them. </li> <li>Let us know what you liked or didn\u2019t like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey? </li> </ul>"},{"location":"sim/00-getting-started/#resources","title":"\ud83d\udcda  Resources","text":"<ul> <li>A short video explaining what GitHub is </li> <li>Git and GitHub learning resources </li> <li>Understanding the GitHub flow</li> <li>How to use GitHub branches</li> <li>Interactive Git training materials</li> <li>GitHub's Learning Lab</li> <li>Education community forum</li> <li>GitHub community forum</li> </ul>"},{"location":"sim/01-basic-operators/","title":"Simula\u00e7\u00e3o das Opera\u00e7\u00f5es B\u00e1sicas de Verilog","text":"<p>Siga as instru\u00e7\u00f5es na p\u00e1gina da disciplina para maiores detalhes.</p> <p>Mas, nesse caso, tudo \u00e9 bem simples, basta completar a implementa\u00e7\u00e3o de todas as sa\u00eddas no arquivo basic.v.</p>"},{"location":"sim/02-vector-operators/","title":"Vetores e sua opera\u00e7\u00f5es","text":"<p>Implemente no arquivo <code>vector.v</code> as sa\u00eddas conforme solicitado:</p> Sa\u00edda Resultado <code>a_bitwise_or_b</code> <code>a</code> and bit-a-bit com <code>b</code> <code>a_logical_or_b</code> <code>a</code> and l\u00f3gico com <code>b</code> <code>a_reduction_or</code> or entre os bits de <code>a</code> <code>b_reduction_or</code> or entre os bits de <code>b</code> <code>not_a_not_b</code> <code>a</code> not bit-a-bit contatenado com <code>b</code> not bit-a-bit"},{"location":"sim/02-vector-operators/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://hdlbits.01xz.net/wiki/Vectorgates</li> <li>https://hdlbits.01xz.net/wiki/Gates4</li> </ul>"},{"location":"sim/03-structural-modules/","title":"Verilog estrutural, instanciando e conectando m\u00f3dulos","text":"<p>Implemente o circuito no arquivo <code>top.v</code> conforme a figura a abaixo e as instru\u00e7\u00f5es a seguir:</p> <p></p> <ul> <li>Use os mesmos nomes para os fios, pois isso \u00e9 importante para que o teste seja bem sucedido. </li> <li>Observe os m\u00f3dulos <code>ma</code> e <code>mb</code> instanciados duas vezes cada um deles:<ul> <li>Fa\u00e7a as liga\u00e7\u00f5es por posi\u00e7\u00e3o quando eles forem totalmente conectados (<code>ib1</code> e <code>ia2</code>);</li> <li>Fa\u00e7a as liga\u00e7\u00f5es por nome quando eles tiverem portas desconectadas (<code>ia1</code> e <code>ib2</code>);</li> <li>Use as primitivas b\u00e1sicas da linguagem Verilog ao inv\u00e9s <code>assign</code> para gerar as portas <code>and</code>, <code>or</code> e <code>xor</code> que aparecem no circuito.</li> </ul> </li> </ul>"},{"location":"sim/03-structural-modules/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://hdlbits.01xz.net/wiki/Module</li> <li>https://hdlbits.01xz.net/wiki/Mt2015_q4</li> <li>https://www.chipverify.com/verilog/verilog-net-types</li> </ul>"},{"location":"sim/04-structural-mux/","title":"Verilog estrutural, instanciando e conectando m\u00f3dulos novamente","text":"<p>Implemente um multiplexador de 4x1 a partir da combina\u00e7\u00e3o de v\u00e1rias inst\u00e2ncias do m\u00f3dulo fornecido:</p> <pre><code>module mux2byte (\n    input [7:0] a, b, \n    input sel, \n    output [7:0] out);\n    assign out = sel ? b : a;\nendmodule\n</code></pre> <ul> <li>Note que cada porta recebe um byte e n\u00e3o um \u00fanico fio;</li> <li>Por isso, \u00e9 necess\u00e1rio declarar os fios intermedi\u00e1rios; </li> <li>Instancie e ligue os muxes que julgar necess\u00e1rios;</li> </ul>"},{"location":"sim/04-structural-mux/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://hdlbits.01xz.net/wiki/Bugs_mux4</li> </ul>"},{"location":"sim/05-shannon-expansion/","title":"Implementando uma fun\u00e7\u00e3o simples usando a expans\u00e3o de Shannon","text":"<p>Implemente a fun\u00e7\u00e3o f(x, y, z) = \u03a3m(1, 4, 5, 7) usando a expans\u00e3o de Shannon em qualquer uma das vari\u00e1veis:</p> <pre><code>module top (\n    input x, y, z, \n    output f;\n    assign f =   ?    :    ;\nendmodule\n</code></pre>"},{"location":"sim/05-shannon-expansion/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://g.co/kgs/98fvDXd</li> </ul>"},{"location":"sim/06-maxterms-minterms/","title":"Convertendo uma fun\u00e7\u00e3o l\u00f3gica de POS para SOP","text":"<p>Considere a fun\u00e7\u00e3o l\u00f3gica a seguir, implementada na forma can\u00f4nica de POS</p> <pre><code>module top (\n    input x, y, z,\n    output f);\n    assign f = (~x | ~y | ~z) &amp; (~x | ~y | z) &amp; (x | ~y | z) &amp; (~x | y | ~z);\nendmodule\n</code></pre> <p>Obtenha uma implementa\u00e7\u00e3o equivalente na forma SOP, sem o uso de par\u00eanteses, seja na forma can\u00f4nica ou simplificada. </p>"},{"location":"sim/07-karnaugh-maps/","title":"Obtendo express\u00f5es com Mapas de Karnaugh para implementa\u00e7\u00e3o","text":"<p>Considere o template a seguir para implementar as tr\u00eas fun\u00e7\u00f5es l\u00f3gicas solicitadas: 1. <code>f1(a, b, c, d) = \u2211m(0, 3, 4, 8, 12, 13, 15)</code> 1. <code>f2(a, b, c, d) = \u220fM(0, 2, 3, 5, 6, 7, 8, 13, 15)</code> 1. <code>f3(a, b, c, d) = \u2211m(0, 2, 3, 7, 8, 9, 12, 13, 15)</code></p> <pre><code>module top (\n    input a, b, c, d,\n    output f1, f2, f3);\n\n\n\nendmodule\n</code></pre>"},{"location":"sim/08-adder-subtractor/","title":"Somador/Subtrator de 32 bits","text":"<p>Considere o template a seguir para implementar um somador/subtrator de 32 bits:</p> <pre><code>module top (\n    input  [31:0] a,\n    input  [31:0] b,\n    input         sub, // 0 = soma, 1 = subtra\u00e7\u00e3o\n    output [31:0] result,\n    output        carry_out, // ~empresta se sub\n    output        overflow);\n\n\n\nendmodule\n</code></pre> <p>Isso deve ser feito usando <code>generate</code> para instanciar os 32 somadores completos. </p>"},{"location":"sim/09-priority-encoder/","title":"Implementando um decodificador de 16 bits com prioridade","text":"<p>O objetivo desta simula\u00e7\u00e3o \u00e9 implementar um codificador de 16 bits em Verilog Estrutural, a partir de um arranjo de codificadores de 4 bits e um multiplexador fornecidos.</p> <p>Para isso, voc\u00ea n\u00e3o pode usar Verilog Comportamental. </p>"},{"location":"sim/10-remote-lab/","title":"Laborat\u00f3rio Remoto de FPGAs","text":"<p>\ud83d\udea8 Isso n\u00e3o \u00e9 uma simula\u00e7\u00e3o!</p> <p>O c\u00f3digo submetido a este reposit\u00f3rio no GitHub \u00e9 enviado automaticamente ao laborat\u00f3rio remoto e configurado na placa por pelo menos cinco minutos. </p> <p>Os pinos de E/S configurados no projeto atual s\u00e3o apenas os seguintes:</p> <pre><code>module almost_top(\n    input  CLOCK_27, // 27 MHz clock input\n    output [5:0] LEDO, // Orange LEDs\n    output [7:0] LEDG, // Green LEDs\n    output WS2812,     // RGB LED (board)\n    output WS2812B,    // REG LED (12 LEDs ring)\n    output SERVO);     // PWM signal for servo motor\n</code></pre> <p>Inspecione o c\u00f3digo inicial fornecido e tente modific\u00e1-lo para fazer alguma itera\u00e7\u00e3o sincronizada entre os LEDs verdes e os laranjas. Capture a anima\u00e7\u00e3o na sua tela com uma grava\u00e7\u00e3o no Google Meet e envie ao professor quando solicitado. </p>"},{"location":"sim/10-remote-lab/#referencias","title":"Refer\u00eancias","text":"<ul> <li>https://legacy.vlab.dc.ufscar.br/camera.php</li> <li>https://github.com/sipeed/TangPrimer-20K-example/</li> <li>https://wiki.sipeed.com/hardware/en/tang/tang-primer-20k/primer-20k.html</li> <li>https://cdn-shop.adafruit.com/datasheets/WS2812B.pdf</li> <li>https://www.servocity.com/servo-faqs</li> </ul>"},{"location":"sim/11-behavioral-brown/","title":"Evitando c\u00f3digo comportamental para fun\u00e7\u00f5es combinacionais","text":"<p>O objetivo desta simula\u00e7\u00e3o \u00e9 converter c\u00f3digo Verilog comportamental em funcional/datapath. Para isso, voc\u00ea deve analizar cada um dos arquivos a seguir e remover o comando <code>always@</code> do seu c\u00f3digo, substituindo por outros que mantenham a funcionalidade original de cada m\u00f3dulo:</p> <ul> <li>addern.sv </li> <li>comparator.sv </li> <li>compare.sv </li> <li>dec2to4.sv </li> <li>mux4to1.sv </li> <li>mux8to2.sv </li> <li>priority_encoder.sv </li> <li>shifter.sv</li> </ul> <p>O script de testes mostra esta mensagem a cada m\u00f3dulo testado sempre que um <code>@</code> \u00e9 encontrado em qualquer arquivo e n\u00e3o diz respeito a um m\u00f3dulo espec\u00edfico:</p> <p>Modo incorreto: voc\u00ea n\u00e3o pode usar Verilog comportamental.</p>"},{"location":"sim/11-behavioral-brown/#trabalho-em-grupo","title":"Trabalho em grupo","text":"<p>\u00c9 fundamental que todos os membros do grupo tenham ao menos uma contribui\u00e7\u00e3o no reposit\u00f3rio (commit), caso contr\u00e1rio a nota geral n\u00e3o ser\u00e1 considerada. </p>"},{"location":"sim/12-moore-mealy/","title":"Maquina de Estados Finitos (Moore vs Mealy)","text":"<p>O objetivo desta pr\u00e1tica \u00e9 construir m\u00e1quinas de estados finitos para reconhecer a sequ\u00eancia <code>1-0-0-1</code>. Voc\u00ea deve criar uma implementa\u00e7\u00e3o para o modelo de Moore e outra para o de Mealy. Ambas devem considerar que a sequ\u00eancia pode ser sobreposta, ou seja, <code>1-0-0-1-0-0-1</code> deve ser reconhecida duas vezes, conforme a figura a seguir:</p> <p></p> <p>Note que a m\u00e1quina de Mealy \u00e9 capaz de reconhecer a sequ\u00eancia antes da subida do clock da \u00faltima entrada procurada. </p>"},{"location":"sim/13-fibonacci-bus/","title":"Gerando a sequ\u00eancia de Fibonacci em um barramento tristate","text":"<p>Usando um barramento compartilhado por meio de buffers tristate, projetar um circuito que gere a sequ\u00eancia de Fibonacci de acordo com a especifica\u00e7\u00e3o a seguir:</p> <p></p> <ul> <li>O circuito deve ser composto de duas partes id\u00eanticas A e B \u2013 inst\u00e2ncias de um mesmo m\u00f3dulo, conforme a figura (i) \u2013 e um controle, todos instanciados e/ou gerados no modulo <code>top.sv</code>;</li> <li>Cada parte \u2013 figura (ii) \u2013- \u00e9 constitu\u00edda por: um registrador, um somador e um buffer tristate. Recebendo sinais de controle convenientes, cada parte deve ser capaz de:<ol> <li>Receber pelo barramento o valor do outro m\u00f3dulo e somar ao valor armazenado em seu pr\u00f3prio registrador, atualizando-o; </li> <li>Enviar (disponibilizar) o valor armazenado em seu pr\u00f3prio registrador pelo mesmo barramento ao m\u00f3dulo oposto; </li> </ol> </li> <li>As a\u00e7\u00f5es acima devem ser realizadas alternadamente pelos dois m\u00f3dulos de forma que a sequ\u00eancia trafegue no barramento, conforme a simula\u00e7\u00e3o: </li> </ul> <p></p>"}]}