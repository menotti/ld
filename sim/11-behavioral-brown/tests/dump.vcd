$date
	Fri Jun 13 14:54:04 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mux8to2 $end
$var wire 2 ! S [1:0] $end
$var wire 8 " W [7:0] $end
$var reg 2 # f [1:0] $end
$upscope $end
$scope module priority_encoder $end
$var wire 4 $ W [3:0] $end
$var reg 2 % Y [1:0] $end
$var reg 1 & Z $end
$upscope $end
$scope module test $end
$var wire 4 ' Y [3:0] $end
$var wire 1 ( Z $end
$var reg 16 ) W [15:0] $end
$var reg 4 * Y_expected [3:0] $end
$var reg 1 + Z_expected $end
$var reg 1 , clk $end
$var reg 32 - errors [31:0] $end
$var reg 32 . vectornum [31:0] $end
$scope module dut $end
$var wire 16 / W [15:0] $end
$var wire 4 0 Y [3:0] $end
$var wire 1 ( Z $end
$upscope $end
$scope task display $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bz 0
bx /
b0 .
b0 -
0,
x+
bx *
bx )
z(
bz '
1&
b11 %
bz $
bx #
bz "
bz !
$end
#50
0+
b0 )
b0 /
1,
#100
b1 .
b1 -
0,
#150
1+
b0 *
b1 )
b1 /
1,
#200
b10 .
b10 -
0,
#250
b1 *
b10 )
b10 /
1,
#300
b11 .
b11 -
0,
#350
b10 *
b100 )
b100 /
1,
#400
b100 .
b100 -
0,
#450
b11 *
b1000 )
b1000 /
1,
#500
b101 .
b101 -
0,
#550
b100 *
b10000 )
b10000 /
1,
#600
b110 .
b110 -
0,
#650
b101 *
b100000 )
b100000 /
1,
#700
b111 .
b111 -
0,
#750
b110 *
b1000000 )
b1000000 /
1,
#800
b1000 .
b1000 -
0,
#850
b111 *
b10000000 )
b10000000 /
1,
#900
b1001 .
b1001 -
0,
#950
b1000 *
b100000000 )
b100000000 /
1,
#1000
b1010 .
b1010 -
0,
#1050
b1001 *
b1000000000 )
b1000000000 /
1,
#1100
b1011 .
b1011 -
0,
#1150
b1010 *
b10000000000 )
b10000000000 /
1,
#1200
b1100 .
b1100 -
0,
#1250
b1011 *
b100000000000 )
b100000000000 /
1,
#1300
b1101 .
b1101 -
0,
#1350
b1100 *
b1000000000000 )
b1000000000000 /
1,
#1400
b1110 .
b1110 -
0,
#1450
b1101 *
b10000000000000 )
b10000000000000 /
1,
#1500
b1111 .
b1111 -
0,
#1550
b1110 *
b100000000000000 )
b100000000000000 /
1,
#1600
b10000 .
b10000 -
0,
#1650
b1111 *
b1000000000000000 )
b1000000000000000 /
1,
#1700
b10001 .
b10001 -
0,
#1750
b1100000000000000 )
b1100000000000000 /
1,
#1800
b10010 .
b10010 -
0,
#1850
b1110000000000000 )
b1110000000000000 /
1,
#1900
b10011 .
b10011 -
0,
#1950
b1111000000000000 )
b1111000000000000 /
1,
#2000
b10100 .
b10100 -
0,
#2050
b1111110000000000 )
b1111110000000000 /
1,
#2100
b10101 .
b10101 -
0,
#2150
b1111111100000000 )
b1111111100000000 /
1,
#2200
b10110 .
b10110 -
0,
#2250
b1111111111000000 )
b1111111111000000 /
1,
#2300
b10111 .
b10111 -
0,
#2350
b1111111111110000 )
b1111111111110000 /
1,
#2400
b11000 .
b11000 -
0,
#2450
b1111111111111100 )
b1111111111111100 /
1,
#2500
b11001 .
b11001 -
0,
#2550
b1111111111111111 )
b1111111111111111 /
1,
#2600
b11010 .
b11010 -
0,
#2650
b1110 *
b111000000000000 )
b111000000000000 /
1,
#2700
b11011 .
b11011 -
0,
#2750
b111110000100100 )
b111110000100100 /
1,
#2800
b11100 .
b11100 -
0,
#2850
b1101 *
b11111000000110 )
b11111000000110 /
1,
#2900
b11101 .
b11101 -
0,
#2950
b1100 *
b1110000100110 )
b1110000100110 /
1,
#3000
b11110 .
b11110 -
0,
#3050
b1011 *
b100000011100 )
b100000011100 /
1,
#3100
b11111 .
b11111 -
0,
#3150
b1010 *
b10110011000 )
b10110011000 /
1,
#3200
b100000 .
b100000 -
0,
#3250
b1001 *
b1111110000 )
b1111110000 /
1,
#3300
b100001 .
b100001 -
0,
#3350
b1000 *
b111101010 )
b111101010 /
1,
#3400
b100010 .
b100010 -
0,
#3450
b111 *
b11110000 )
b11110000 /
1,
#3500
b100011 .
b100011 -
0,
#3550
b110 *
b1011111 )
b1011111 /
1,
#3600
b100100 .
b100100 -
0,
#3650
b101 *
b101010 )
b101010 /
1,
#3700
b100101 .
b100101 -
0,
#3750
b100 *
b10101 )
b10101 /
1,
#3800
b100110 .
b100110 -
0,
#3850
b11 *
b1010 )
b1010 /
1,
#3900
b100111 .
b100111 -
0,
#3950
b10 *
b101 )
b101 /
1,
#4000
b101000 .
b101000 -
0,
#4050
b1 *
b11 )
b11 /
1,
#4100
b101001 .
b101001 -
0,
#4150
b0 *
b1 )
b1 /
1,
#4200
b101010 .
b101010 -
0,
